(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _persistence_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./persistence.js */ \"./persistence.js\");\n\n\n// Recursive function that walks the directory structure.\nconst getFiles = async (dirHandle, path = dirHandle.name) => {\n    const dirs = [];\n    const files = [];\n    for await (const entry of dirHandle.values()) {\n    const nestedPath = `${path}/${entry.name}`;\n    if (entry.kind === \"file\") {\n        files.push(\n        entry.getFile().then((file) => {\n            file.directoryHandle = dirHandle;\n            file.handle = entry;\n            return Object.defineProperty(file, \"webkitRelativePath\", {\n            configurable: true,\n            enumerable: true,\n            get: () => nestedPath,\n            });\n        })\n        );\n    } else if (entry.kind === \"directory\") {\n        dirs.push(getFiles(entry, nestedPath));\n    }\n    }\n    return [\n    ...(await Promise.all(dirs)).flat(),\n    ...(await Promise.all(files)),\n    ];\n};\n\nvar InstantSearch = {\n\n    \"highlight\": function (container, highlightText)\n    {\n        var internalHighlighter = function (options)\n        {\n\n            var id = {\n                container: \"container\",\n                tokens: \"tokens\",\n                all: \"all\",\n                token: \"token\",\n                className: \"className\",\n                sensitiveSearch: \"sensitiveSearch\"\n            },\n            tokens = options[id.tokens],\n            allClassName = options[id.all][id.className],\n            allSensitiveSearch = options[id.all][id.sensitiveSearch];\n\n\n            function checkAndReplace(node, tokenArr, classNameAll, sensitiveSearchAll)\n            {\n                var nodeVal = node.nodeValue, parentNode = node.parentNode,\n                    i, j, curToken, myToken, myClassName, mySensitiveSearch,\n                    finalClassName, finalSensitiveSearch,\n                    foundIndex, begin, matched, end,\n                    textNode, span, isFirst;\n\n                for (i = 0, j = tokenArr.length; i < j; i++)\n                {\n                    curToken = tokenArr[i];\n                    myToken = curToken[id.token];\n                    myClassName = curToken[id.className];\n                    mySensitiveSearch = curToken[id.sensitiveSearch];\n\n                    finalClassName = (classNameAll ? myClassName + \" \" + classNameAll : myClassName);\n\n                    finalSensitiveSearch = (typeof sensitiveSearchAll !== \"undefined\" ? sensitiveSearchAll : mySensitiveSearch);\n\n                    isFirst = true;\n                    while (true)\n                    {\n                        if (finalSensitiveSearch)\n                            foundIndex = nodeVal.indexOf(myToken);\n                        else\n                            foundIndex = nodeVal.toLowerCase().indexOf(myToken.toLowerCase());\n\n                        if (foundIndex < 0)\n                        {\n                            if (isFirst)\n                                break;\n\n                            if (nodeVal)\n                            {\n                                textNode = document.createTextNode(nodeVal);\n                                parentNode.insertBefore(textNode, node);\n                            } // End if (nodeVal)\n\n                            parentNode.removeChild(node);\n                            break;\n                        } // End if (foundIndex < 0)\n\n                        isFirst = false;\n\n\n                        begin = nodeVal.substring(0, foundIndex);\n                        matched = nodeVal.substring(foundIndex, foundIndex + myToken.length);\n\n                        if (begin)\n                        {\n                            textNode = document.createTextNode(begin);\n                            parentNode.insertBefore(textNode, node);\n                        } // End if (begin)\n\n                        span = document.createElement(\"span\");\n                        span.className += finalClassName;\n                        span.appendChild(document.createTextNode(matched));\n                        parentNode.insertBefore(span, node);\n\n                        nodeVal = nodeVal.substring(foundIndex + myToken.length);\n                    } // Whend\n\n                } // Next i \n            }; // End Function checkAndReplace \n\n            function iterator(p)\n            {\n                if (p === null) return;\n\n                var children = Array.prototype.slice.call(p.childNodes), i, cur;\n\n                if (children.length)\n                {\n                    for (i = 0; i < children.length; i++)\n                    {\n                        cur = children[i];\n                        if (cur.nodeType === 3)\n                        {\n                            checkAndReplace(cur, tokens, allClassName, allSensitiveSearch);\n                        }\n                        else if (cur.nodeType === 1)\n                        {\n                            iterator(cur);\n                        }\n                    }\n                }\n            }; // End Function iterator\n\n            iterator(options[id.container]);\n        } // End Function highlighter\n        ;\n\n\n        internalHighlighter(\n            {\n                container: container\n                , all:\n                    {\n                        className: \"highlighter\"\n                    }\n                , tokens: [\n                    {\n                        token: highlightText\n                        , className: \"highlight\"\n                        , sensitiveSearch: false\n                    }\n                ]\n            }\n        ); // End Call internalHighlighter \n\n    } // End Function highlight\n\n};\n\nconst LOREMASTER_STATE_WAIT_WASM = \"WAIT_WASM\";\nconst LOREMASTER_STATE_IDLE = \"IDLE\";\nconst LOREMASTER_STATE_SETUP = \"SETUP\";\nconst LOREMASTER_STATE_SEARCHING = \"SEARCHING\";\nconst LOREMASTER_STATE_GET_CONTEXT = \"GET_CONTEXT\";\n\nwindow.loremaster = {};\nwindow.loremaster.currentState = LOREMASTER_STATE_IDLE;\n\nconst stateTransition = (newState) => {\n    switch (newState) {\n        case LOREMASTER_STATE_IDLE:\n            document.getElementById(\"loading\").style.display = \"none\";\n            document.getElementById(\"searching\").style.display = \"none\";\n            break;\n        case LOREMASTER_STATE_WAIT_WASM:\n        case LOREMASTER_STATE_SETUP:\n            document.getElementById(\"loading\").style.display = \"block\";\n            break;\n        case LOREMASTER_STATE_GET_CONTEXT:\n            break;\n        case LOREMASTER_STATE_SEARCHING:\n            document.getElementById(\"searching\").style.display = \"block\";\n            break;\n    }\n}\n\nconst setupIw = async (worker, directoryStructure) => {\n    stateTransition(LOREMASTER_STATE_SETUP);\n    worker.postMessage({\n        type: \"setup\",\n        file_index1: directoryStructure.find(x => x.name === \"0a0000.win32.index\"),\n        file_index2: directoryStructure.find(x => x.name === \"0a0000.win32.index2\"),\n        file_dat: directoryStructure.find(x => x.name === \"0a0000.win32.dat0\"),\n        file_ver: directoryStructure.find(x => x.name === \"ffxivgame.ver\"),\n    });\n};\n\nstateTransition(LOREMASTER_STATE_WAIT_WASM);\n\nconst openFullViewForResult = async (worker, result) => {\n    stateTransition(LOREMASTER_STATE_GET_CONTEXT);\n\n    window.loremaster.fullviewCurrentRow = result.row;\n\n    document.getElementById(\"fullview_container\").style.display = \"block\";\n\n    worker.postMessage({\n        type: \"context\",\n        sheet: result.sheet,\n        row: result.row,\n        context_len: 8,\n        field_idx: result.field\n    });\n};\n\nconst scrollFullviewUp = () => {\n    let lastRow = window.loremaster.fullviewLastRow;\n    if (lastRow !== undefined) {\n        openFullViewForResult(window.loremaster.worker, lastRow);\n    }\n};\n\nwindow.loremaster.scrollFullviewUp = scrollFullviewUp;\n\nconst scrollFullviewDown = () => {\n    let nextRow = window.loremaster.fullviewNextRow;\n    if (nextRow !== undefined) {\n        openFullViewForResult(window.loremaster.worker, nextRow);\n    }\n};\n\nwindow.loremaster.scrollFullviewDown = scrollFullviewDown;\n\nconst closeFullview = () => {\n    document.getElementById(\"fullview_container\").style.display = \"none\";\n\n    window.loremaster.fullviewCurrentRow = undefined;\n    window.loremaster.fullviewLastRow = undefined;\n    window.loremaster.fullviewNextRow = undefined;\n\n    stateTransition(LOREMASTER_STATE_IDLE);\n};\n\ndocument.body.addEventListener('keypress', function(e) {\n    if (e.key === \"u\") {\n        scrollFullviewUp();\n    }\n\n    if (e.key === \"d\") {\n        scrollFullviewDown();\n    }\n\n    if (e.key === \"q\" || e.key === \"Escape\" || e.key === \"Esc\") {\n        closeFullview();\n    }\n});\n\nwindow.loremaster.closeFullview = closeFullview;\n\nasync function run_wasm() {\n    var myWorker = new Worker('./worker.js');\n    window.loremaster.worker = myWorker;\n\n    myWorker.onmessage = async function(e) {\n        switch (e.data.type) {\n            case \"setup\":\n                {\n                    console.log(\"setup done\");\n                    stateTransition(LOREMASTER_STATE_IDLE);\n                    document.getElementById(\"open_folder\").style.display = \"none\";\n                    document.getElementById(\"search_act\").disabled = false;\n                    document.getElementById(\"lucky_act\").disabled = false;\n                    document.getElementById(\"guide\").style.display = \"none\";\n                }\n                break;\n            \n            case \"loaded\":\n                {\n                    console.log(\"worker is fine\");\n                    try {\n                        let savedDirHandle = await Object(_persistence_js__WEBPACK_IMPORTED_MODULE_0__[\"getLastFolderHandle\"])();\n                        if (savedDirHandle !== undefined) {\n                            let directoryStructure = await getFiles(savedDirHandle, undefined);\n                            console.log(\"init with persisted dir\");\n                            await setupIw(myWorker, directoryStructure);\n                        }\n                        else\n                        {\n                            stateTransition(LOREMASTER_STATE_IDLE);\n                        }\n                    }\n                    catch (err) {\n                        console.error(err);\n                    }\n                }\n                break;\n\n            case \"search\":\n                {\n                    console.log(\"search done for \" + e.data.search);\n                    console.log(e.data.results);\n\n                    const noresultsbox = document.getElementById(\"no_results\");\n                    noresultsbox.style.display = \"none\";\n\n                    const results_box = document.getElementById(\"results_box\");\n                    results_box.innerHTML = \"\";\n                    results_box.appendChild(noresultsbox);\n\n                    window.loremaster.searchResults = e.data.results;\n                    e.data.results.forEach((x, idx) => {\n                        let result = document.createElement(\"div\");\n                        result.className = \"result\";\n                        result.dataset.resultIdx = idx;\n\n                        let resultContext = document.createElement(\"p\");\n                        resultContext.className = \"result_context\";\n                        resultContext.innerHTML = `${x.sheet} (${x.row})`;\n                        result.appendChild(resultContext);\n\n                        let resultText = document.createElement(\"p\");\n                        resultText.className = \"result_text\";\n                        resultText.innerHTML = x.value;\n                        result.appendChild(resultText);\n\n                        result.addEventListener(\"click\", async function(e) {\n                            openFullViewForResult(myWorker, x);\n                            // get result index\n                        });\n                        results_box.appendChild(result);\n                    });\n\n                    InstantSearch.highlight(results_box, e.data.search);\n\n                    \n                    let serachcontext = document.getElementById(\"searchcontext\");\n                    serachcontext.className = \"duration\";\n                    serachcontext.innerHTML = `Found ${e.data.results.length} results in ${e.data.duration}ms`;\n\n                    if (e.data.results.length === 0) {\n                        \n                        noresultsbox.style.display = \"block\";\n                    }\n                \n                    //document.getElementById(\"search_results\").innerHTML = e.data.results.map(x => x.webkitRelativePath).join(\"<br>\");\n                    stateTransition(LOREMASTER_STATE_IDLE);\n                }\n                break;\n\n            case \"context\":\n                {\n                    console.log(\"context done\");\n                    console.log(e.data);\n\n                    const fullview = document.getElementById(\"fullviewbody\");\n                    fullview.innerHTML = \"\";\n\n                    const currentRow = window.loremaster.fullviewCurrentRow;\n                    let lastRow = undefined;\n                    let sawCurrentRow = false;\n                    window.loremaster.fullviewLastRow = undefined;\n                    window.loremaster.fullviewNextRow = undefined;\n\n                    for (let i = 0; i < e.data.context.length; i++) {\n                        let row = e.data.context[i];\n\n                        if (row.row === currentRow) {\n                            sawCurrentRow = true;\n                            window.loremaster.fullviewLastRow = lastRow;\n                        }\n                        \n                        let rowElement = document.createElement(\"div\");\n                        rowElement.className = \"fullview_row\";\n                        if (row.row === currentRow) {\n                            rowElement.className += \" fullview_highlight\";\n                        }\n\n                        let rowText = document.createElement(\"p\");\n                        rowText.className = \"fullview_row_text\";\n                        if (row.row === currentRow) {\n                            rowText.className += \" fullview_row_text_highlight\";\n                        }\n                        rowText.innerHTML = row.value;\n                        rowElement.appendChild(rowText);\n\n                        let rowContext = document.createElement(\"p\");\n                        rowContext.className = \"fullview_row_context\";\n                        rowContext.innerHTML = `${row.sheet} (${row.row})`;\n                        rowElement.appendChild(rowContext);\n\n                        rowElement.addEventListener(\"click\", async function(e) {\n                            openFullViewForResult(myWorker, row);\n                        });\n\n                        fullview.appendChild(rowElement);\n\n                        if (!sawCurrentRow) {\n                            lastRow = row;\n                        }\n                        else if (row.row !== currentRow && window.loremaster.fullviewNextRow === undefined) {\n                            window.loremaster.fullviewNextRow = row;\n                        }\n                    }\n\n                    document.getElementById(\"scroll_up\").disabled = window.loremaster.fullviewLastRow === undefined;\n                    document.getElementById(\"scroll_down\").disabled = window.loremaster.fullviewNextRow === undefined;\n\n\n                    stateTransition(LOREMASTER_STATE_IDLE);\n                }\n                break;\n        }\n    };\n\n\n\n    document.getElementById(\"open_folder\").addEventListener(\n        \"click\",\n        async function() {\n\n            // Feature detection. The API needs to be supported\n            // and the app not run in an iframe.\n            const supportsFileSystemAccess =\n            \"showDirectoryPicker\" in window &&\n            (() => {\n                try {\n                return window.self === window.top;\n                } catch {\n                return false;\n                }\n            })();\n            // If the File System Access API is supported…\n            if (supportsFileSystemAccess) {\n                let directoryStructure = undefined;\n\n                \n\n                try {\n                    const mode = \"read\";\n                    // Open the directory.\n                    const handle = await showDirectoryPicker({\n                    mode,\n                    });\n\n                    console.log(handle);\n                    Object(_persistence_js__WEBPACK_IMPORTED_MODULE_0__[\"saveDirHandle\"])(handle);\n\n                    // Get the directory structure.\n                    directoryStructure = await getFiles(handle, undefined);\n                    setupIw(myWorker, directoryStructure);\n                } catch (err) {\n                    if (err.name !== \"AbortError\") {\n                    console.error(err.name, err.message);\n                    }\n                }\n            }\n            else\n            {\n                alert(\"Filesystem access not supported on your browser. Use Chrome instead.\");\n            }\n        },\n        false\n    );\n\n    document.getElementById(\"search_act\").addEventListener(\n        \"click\",\n        async function() {\n            const search_str = document.getElementById(\"search\").value;\n            if (search_str.length < 3) {\n                alert(\"Search string must be at least 3 characters long.\");\n                return;\n            }\n\n            stateTransition(LOREMASTER_STATE_SEARCHING);\n            myWorker.postMessage({\n                type: \"dosearch\",\n                search: search_str,\n            });\n        },\n        false\n    );\n}\n\nrun_wasm();\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./persistence.js":
/*!************************!*\
  !*** ./persistence.js ***!
  \************************/
/*! exports provided: saveDirHandle, getLastFolderHandle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"saveDirHandle\", function() { return saveDirHandle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLastFolderHandle\", function() { return getLastFolderHandle; });\n/** @type {Promise<IDBDatabase>} */\r\nconst dbPromise = new Promise((resolve, reject) => {\r\n    const request = indexedDB.open('handle', 1);\r\n    request.onupgradeneeded = (event) => {\r\n        const db = event.target.result;\r\n        db.createObjectStore('handles', { keyPath: 'id' });\r\n    };\r\n    request.onsuccess = (event) => {\r\n        resolve(event.target.result);\r\n    };\r\n    request.onerror = (event) => {\r\n        console.error(event);\r\n        reject(event.target.error);\r\n    };\r\n});\r\n\r\n/**\r\n * Saves a directory handle to the database.\r\n * @param {FileSystemDirectoryHandle} dirHandle - The directory handle to save.\r\n * @returns {Promise<void>} A promise that resolves when the handle is saved.\r\n */\r\nconst saveDirHandle = (dirHandle) => {\r\n    return new Promise((resolve, reject) => {\r\n        dbPromise.then((db) => {\r\n            const transaction = db.transaction(['handles'], 'readwrite');\r\n            const store = transaction.objectStore('handles');\r\n            const request = store.put({ id: 'lastFolder', handle: dirHandle });\r\n            request.onsuccess = () => resolve();\r\n            request.onerror = () => reject(request.error);\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Retrieves the last saved folder handle from the database.\r\n * @returns {Promise<FileSystemDirectoryHandle|undefined>} A promise that resolves with the folder handle or undefined if not found.\r\n */\r\nconst getLastFolderHandle = () => {\r\n    return new Promise((resolve, reject) => {\r\n        dbPromise.then((db) => {\r\n            const transaction = db.transaction(['handles'], 'readonly');\r\n            const store = transaction.objectStore('handles');\r\n            const request = store.get('lastFolder');\r\n            request.onsuccess = (event) => resolve((event.target.result ? event.target.result.handle : undefined));\r\n            request.onerror = () => reject(request.error);\r\n        });\r\n    });\r\n};\n\n//# sourceURL=webpack:///./persistence.js?");

/***/ })

}]);